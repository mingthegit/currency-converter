{"version":3,"sources":["utils/interfaces.ts","components/CurrencyForm.tsx","components/HistoryGraph.tsx","utils/api.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Currency","CurrencySource","DateRange","CurrencyOptions","value","GBP","label","EUR","USD","CAD","CNY","JPY","RUB","HKD","selectProps","className","showSearch","options","placeholder","filterOption","input","option","toLowerCase","indexOf","CurrencyForm","formValues","setFormValues","exchangeRate","handleCurrencySelect","field","nextBase","nextTarget","prevBase","base","prevTarget","target","Base","amount","amountFallback","amountConverted","toFixed","size","layout","gutter","xs","Item","onSelect","Target","min","onChange","isValid","isNaN","parseFloat","span","HistoryGraph","graphData","dateRange","setDateRange","justify","Paragraph","Object","values","map","range","type","onClick","handleRangeSelect","ResponsiveContainer","AreaChart","width","height","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","padding","Tooltip","Area","stroke","fill","API_BASE","fetchExchangeRate","a","fetch","request","json","response","rates","fetchHistoryData","endDate","dayjs","format","FiveDays","OneYear","startDate","subtract","series","keys","sort","date","rate","Header","Layout","Content","Footer","Title","Typography","Text","App","useState","undefined","setExchangeRate","OneMonth","setGraphData","useEffect","API","console","error","sm","md","xl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94fbd8d6.chunk.js","sourcesContent":["export enum Currency {\n  GBP = \"GBP\",\n  EUR = \"EUR\",\n  USD = \"USD\",\n  CAD = \"CAD\",\n  CNY = \"CNY\",\n  JPY = \"JPY\",\n  RUB = \"RUB\",\n  HKD = \"HKD\",\n}\n\nexport const CurrencyOptions = [\n  { value: Currency.GBP, label: \"Pound sterling (GBP)\" },\n  { value: Currency.EUR, label: \"Euro (EUR)\" },\n  { value: Currency.USD, label: \"United States Dollar (USD)\" },\n  { value: Currency.CAD, label: \"Canadian Dollar (CAD)\" },\n  { value: Currency.CNY, label: \"Chinese Yuan (CNY)\" },\n  { value: Currency.JPY, label: \"Japanese Yen (JPY)\" },\n  { value: Currency.RUB, label: \"Russian Ruble (RUB)\" },\n  { value: Currency.HKD, label: \"Hong Kong Dollar (HKD)\" },\n];\n\nexport type NullableNumber = number | undefined;\n\nexport type FormSchema = {\n  base: Currency;\n  target: Currency;\n  amount: NullableNumber;\n};\n\nexport enum CurrencySource {\n  Base = \"base\",\n  Target = \"target\",\n}\n\nexport enum DateRange {\n  FiveDays = \"5 Days\",\n  OneMonth = \"1 Month\",\n  OneYear = \"1 Year\",\n}\nexport interface GraphPoint {\n  date: string;\n  rate: number;\n}\n\nexport type Rates = {\n  [currency in Currency]: number;\n};\n\nexport interface ExchangeRateResponseObject {\n  base: string;\n  rates: Rates;\n}\n\nexport type HistoryRates = {\n  [date: string]: Rates;\n};\n\nexport interface HistoryResponseObject {\n  base: string;\n  rates: HistoryRates;\n}\n","import React from \"react\";\nimport { Row, Col, Form, InputNumber, Select } from \"antd\";\n\nimport {\n  Currency,\n  CurrencyOptions,\n  FormSchema,\n  CurrencySource,\n  NullableNumber,\n} from \"utils/interfaces\";\nimport \"./CurrencyForm.scss\";\n\ninterface CurrencyFormProps {\n  formValues: Partial<FormSchema>;\n  setFormValues: Function;\n  exchangeRate: NullableNumber;\n}\n\nconst selectProps = {\n  className: \"CurrencySelector\",\n  showSearch: true,\n  options: CurrencyOptions,\n  placeholder: \"Select...\",\n  filterOption: (input: string, option: any): boolean => {\n    return option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n  },\n};\n\nconst CurrencyForm = ({ formValues, setFormValues, exchangeRate }: CurrencyFormProps) => {\n  const handleCurrencySelect = (field: CurrencySource, value: Currency) => {\n    const { base: prevBase, target: prevTarget } = formValues;\n    let nextBase, nextTarget;\n    // @BONUS: if same currencies are selected, swap them\n    if (field === CurrencySource.Base) {\n      nextBase = value;\n      nextTarget = value === prevTarget ? prevBase : prevTarget;\n    } else {\n      nextTarget = value;\n      nextBase = value === prevBase ? prevTarget : prevBase;\n    }\n\n    setFormValues({ ...formValues, base: nextBase, target: nextTarget });\n  };\n\n  const handleAmountChange = (value: any) => {\n    const isValid = !isNaN(parseFloat(value));\n    setFormValues({\n      ...formValues,\n      amount: isValid ? parseFloat(value) : formValues.amount,\n    });\n  };\n\n  const { base, target, amount } = formValues;\n  const amountFallback = amount || 1;\n  const amountConverted = exchangeRate ? (amountFallback * exchangeRate).toFixed(2) : \"\";\n\n  return (\n    <Form size=\"large\" layout=\"vertical\" className=\"CurrencyForm\">\n      <Row gutter={24}>\n        <Col xs={24}>\n          <Form.Item label=\"From\">\n            <Select\n              {...selectProps}\n              value={formValues.base}\n              onSelect={(value) => {\n                handleCurrencySelect(CurrencySource.Base, value);\n              }}\n            />\n          </Form.Item>\n        </Col>\n        <Col xs={24}>\n          <Form.Item label=\"To\">\n            <Select\n              {...selectProps}\n              value={formValues.target}\n              onSelect={(value) => {\n                handleCurrencySelect(CurrencySource.Target, value);\n              }}\n            />\n          </Form.Item>\n        </Col>\n        <Col xs={24}>\n          <Form.Item label=\"Amount\">\n            <InputNumber\n              className=\"AmountInput\"\n              placeholder=\"In Base Currency\"\n              min={0}\n              value={amount}\n              onChange={handleAmountChange}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={24}>\n          {exchangeRate && (\n            <div className=\"ResultBox\">\n              {`${amountFallback} ${base} equals`}\n              <strong>{`${amountConverted} ${target}`}</strong>\n            </div>\n          )}\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default CurrencyForm;\n","import React from \"react\";\nimport { Row, Col, Typography, Button, Space } from \"antd\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\n\nimport { DateRange, GraphPoint } from \"utils/interfaces\";\nimport \"./HistoryGraph.scss\";\n\ninterface HistoryGraphProps {\n  graphData: GraphPoint[];\n  dateRange: DateRange;\n  setDateRange: Function;\n}\n\nconst HistoryGraph = ({ graphData, dateRange, setDateRange }: HistoryGraphProps) => {\n  const handleRangeSelect = (range: string) => {\n    setDateRange(range);\n  };\n\n  return (\n    <Row justify=\"center\" className=\"HistoryGraph\">\n      <Col span={24}>\n        <Typography.Paragraph className=\"Title\">Exchange History</Typography.Paragraph>\n      </Col>\n      <Col span={24} className=\"RangeSelector\">\n        <Space>\n          {Object.values(DateRange).map((range) => (\n            <Button\n              key={range}\n              type={range === dateRange ? \"primary\" : \"default\"}\n              onClick={() => handleRangeSelect(range)}\n            >\n              {range}\n            </Button>\n          ))}\n        </Space>\n      </Col>\n      <Col span={24} className=\"ResponsiveContainer\">\n        <ResponsiveContainer>\n          <AreaChart\n            width={600}\n            height={300}\n            data={graphData}\n            margin={{ top: 0, right: 0, left: 0, bottom: 0 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis padding={{ top: 64 }} />\n            <Tooltip />\n            <Area type=\"monotone\" dataKey=\"rate\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\n          </AreaChart>\n        </ResponsiveContainer>\n      </Col>\n    </Row>\n  );\n};\n\nexport default HistoryGraph;\n","import dayjs from \"dayjs\";\n\nimport {\n  FormSchema,\n  DateRange,\n  GraphPoint,\n  NullableNumber,\n  ExchangeRateResponseObject,\n  HistoryResponseObject,\n} from \"utils/interfaces\";\n\nconst API_BASE = \"https://api.exchangeratesapi.io\";\n\nexport const fetchExchangeRate = async ({\n  base,\n  target,\n}: FormSchema): Promise<NullableNumber> => {\n  try {\n    const request = await fetch(`${API_BASE}/latest?base=${base}&symbols=${target}`);\n    const response: ExchangeRateResponseObject = await request.json();\n    if (target) {\n      return response.rates[target];\n    } else {\n      return;\n    }\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport const fetchHistoryData = async (\n  formValues: FormSchema,\n  dateRange: DateRange\n): Promise<GraphPoint[]> => {\n  try {\n    const { base, target } = formValues;\n\n    let startDate,\n      endDate = dayjs().format(\"YYYY-MM-DD\");\n    switch (dateRange) {\n      case DateRange.FiveDays:\n        startDate = dayjs().subtract(5, \"day\").format(\"YYYY-MM-DD\");\n        break;\n      case DateRange.OneYear:\n        startDate = dayjs().subtract(1, \"year\").format(\"YYYY-MM-DD\");\n        break;\n      default:\n        startDate = dayjs().subtract(1, \"month\").format(\"YYYY-MM-DD\");\n    }\n\n    const request = await fetch(\n      `${API_BASE}/history?start_at=${startDate}&end_at=${endDate}&base=${base}&symbols=${target}`\n    );\n    const response: HistoryResponseObject = await request.json();\n    const series: GraphPoint[] = Object.keys(response.rates)\n      .sort()\n      .map((date: string) => ({\n        date,\n        rate: response.rates[date][target],\n      }));\n\n    return series;\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport default {\n  fetchExchangeRate,\n  fetchHistoryData,\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Layout, Typography, Row, Col, Space } from \"antd\";\n\nimport CurrencyForm from \"components/CurrencyForm\";\nimport HistoryGraph from \"components/HistoryGraph\";\nimport { Currency, FormSchema, NullableNumber, DateRange, GraphPoint } from \"utils/interfaces\";\nimport API from \"utils/api\";\nimport \"./App.scss\";\n\nconst { Header, Content, Footer } = Layout;\nconst { Title, Text } = Typography;\n\nconst App = () => {\n  const [formValues, setFormValues] = useState<FormSchema>({\n    base: Currency.GBP,\n    target: Currency.EUR,\n    amount: undefined,\n  });\n  const [exchangeRate, setExchangeRate] = useState<NullableNumber>();\n  const [dateRange, setDateRange] = useState<DateRange>(DateRange.OneMonth);\n  const [graphData, setGraphData] = useState<GraphPoint[]>([]);\n\n  useEffect(() => {\n    async function fetchExchangeRate(formValues: FormSchema) {\n      try {\n        const rate = await API.fetchExchangeRate(formValues);\n        setExchangeRate(rate);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    fetchExchangeRate(formValues);\n  }, [formValues.base, formValues.target]);\n\n  useEffect(() => {\n    async function fetchHistoryData(formValues: FormSchema, dateRange: DateRange) {\n      try {\n        setGraphData(await API.fetchHistoryData(formValues, dateRange));\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    fetchHistoryData(formValues, dateRange);\n  }, [formValues.base, formValues.target, dateRange]);\n\n  return (\n    <Layout className=\"AppLayout\">\n      <Header className=\"Header\">\n        <Title>Currency Converter</Title>\n      </Header>\n      <Content className=\"Content\">\n        <Space size=\"large\" />\n        <Row justify=\"center\" gutter={24}>\n          <Col xs={22} sm={16} md={8} xl={5} className=\"Column\">\n            <CurrencyForm\n              formValues={formValues}\n              setFormValues={setFormValues}\n              exchangeRate={exchangeRate}\n            />\n          </Col>\n          <Col xs={22} sm={16} md={10} xl={8} className=\"Column\">\n            <HistoryGraph graphData={graphData} dateRange={dateRange} setDateRange={setDateRange} />\n          </Col>\n        </Row>\n      </Content>\n      <Footer>\n        <Text>Data provided by https://exchangeratesapi.io</Text>\n      </Footer>\n    </Layout>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}